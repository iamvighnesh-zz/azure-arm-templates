{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "sql.server.primary.name": {
      "type": "string"
    },
    "sql.server.primary.location": {
      "type": "string"
    },
    "sql.server.secondary.name": {
      "type": "string"
    },
    "sql.server.secondary.location": {
      "type": "string"
    },
    "sql.server.failover.group.name": {
      "type": "string"
    },
    "sql.server.administrator.user.name": {
      "type": "string"
    },
    "sql.server.administrator.password": {
      "type": "securestring"
    },
    "sql.server.whitelisted.ip.addresses": {
      "type": "object"
    },
    "azure.active.directory.administrator.group": {
      "type": "string"
    },
    "azure.active.directory.object.id": {
      "type": "string"
    },
    "azure.active.directory.tenant.id": {
      "type": "string"
    },
    "sql.database.name": {
      "type": "string"
    },
    "sql.database.sku.name": {
      "type": "string"
    },
    "sql.database.sku.tier": {
      "type": "string"
    },
    "sql.database.sku.capacity": {
      "type": "string"
    },
    "sql.database.edition": {
      "type": "string"
    },
    "sql.database.collation": {
      "type": "string"
    },
    "sql.database.maximum.size.in.bytes": {
      "type": "string"
    },
    "sql.database.zone.redundancy.enabled": {
      "type": "string"
    },
    "sql.database.read.scale.out": {
      "type": "string"
    },
    "sql.server.primary.storage.account.name": {
      "type": "string"
    },
    "sql.server.secondary.storage.account.name": {
      "type": "string"
    },
    "sql.server.security.email.addresses": {
      "type": "string"
    },
    "sql.server.storage.account.subscription.id": {
      "type": "string"
    }
  },
  "variables": {
    "sql.server.primary.storage.account.endpoint": "[concat('https://', parameters('sql.server.primary.storage.account.name'), '.blob.core.windows.net')]",
    "sql.server.secondary.storage.account.endpoint": "[concat('https://', parameters('sql.server.secondary.storage.account.name'), '.blob.core.windows.net')]",
    "sql.server.storage.account.audit.retention.in.days": 90,
    "sql.server.storage.account.audit.event.types": [
      "APPLICATION_ROLE_CHANGE_PASSWORD_GROUP",
      "BACKUP_RESTORE_GROUP",
      "DATABASE_OBJECT_CHANGE_GROUP",
      "DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP",
      "DATABASE_OBJECT_PERMISSION_CHANGE_GROUP",
      "DATABASE_OPERATION_GROUP",
      "DATABASE_PERMISSION_CHANGE_GROUP",
      "DATABASE_PRINCIPAL_CHANGE_GROUP",
      "DATABASE_PRINCIPAL_IMPERSONATION_GROUP",
      "DATABASE_ROLE_MEMBER_CHANGE_GROUP",
      "FAILED_DATABASE_AUTHENTICATION_GROUP",
      "SCHEMA_OBJECT_ACCESS_GROUP",
      "SCHEMA_OBJECT_CHANGE_GROUP",
      "SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP",
      "SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP",
      "SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP",
      "USER_CHANGE_PASSWORD_GROUP"
    ]
  },
  "resources": [
    {
      "type": "Microsoft.Sql/servers",
      "name": "[parameters('sql.server.primary.name')]",
      "location": "[parameters('sql.server.primary.location')]",
      "apiVersion": "2015–05–01-preview",
      "properties": {
        "administratorLogin": "[parameters('sql.server.administrator.user.name')]",
        "administratorLoginPassword": "[parameters('sql.server.administrator.password')]"
      },
      "resources": [
        {
          "name": "[parameters('sql.server.failover.group.name')]",
          "type": "failoverGroups",
          "apiVersion": "2015-05-01-preview",
          "properties": {
            "serverName": "[parameters('sql.server.primary.name')]",
            "partnerServers": [
              {
                "id": "[resourceId('Microsoft.Sql/servers/', parameters('sql.server.secondary.name'))]"
              }
            ],
            "readWriteEndpoint": {
              "failoverPolicy": "Automatic",
              "failoverWithDataLossGracePeriodMinutes": 60
            },
            "readOnlyEndpoint": {
              "failoverPolicy": "Disabled"
            },
            "databases": [
              "[resourceId('Microsoft.Sql/servers/databases', parameters('sql.server.primary.name'), parameters('sql.database.name'))]"
            ]
          },
          "dependsOn": [
            "[parameters('sql.server.primary.name')]",
            "[resourceId('Microsoft.Sql/servers', parameters('sql.server.secondary.name'))]",
            "[resourceId('Microsoft.Sql/servers/databases', parameters('sql.server.primary.name'), parameters('sql.database.name'))]"
          ]
        },
        {
          "type": "administrators",
          "name": "activeDirectory",
          "location": "[parameters('sql.server.primary.location')]",
          "apiVersion": "2014-04-01-preview",
          "properties": {
            "administratorType": "ActiveDirectory",
            "login": "[parameters('azure.active.directory.administrator.group')]",
            "sid": "[parameters('azure.active.directory.object.id')]",
            "tenantId": "[parameters('azure.active.directory.tenant.id')]"
          },
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', parameters('sql.server.primary.name'))]"
          ]
        },
        {
          "type": "databases",
          "name": "[parameters('sql.database.name')]",
          "location": "[parameters('sql.server.primary.location')]",
          "apiVersion": "2017-10-01-preview",
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', parameters('sql.server.primary.name'))]"
          ],
          "sku": {
            "name": "[parameters('sql.database.sku.name')]",
            "tier": "[parameters('sql.database.sku.tier')]",
            "capacity": "[parameters('sql.database.sku.capacity')]"
          },
          "properties": {
            "edition": "[parameters('sql.database.edition')]",
            "collation": "[parameters('sql.database.collation')]",
            "maxSizeBytes": "[parameters('sql.database.maximum.size.in.bytes')]",
            "zoneRedundant": "[parameters('sql.database.zone.redundancy.enabled')]",
            "readScale": "[parameters('sql.database.read.scale.out')]"
          },
          "resources": [
            {
              "name": "current",
              "type": "transparentDataEncryption",
              "apiVersion": "2014-04-01",
              "properties": {
                "status": "Enabled"
              },
              "dependsOn": [
                "[parameters('sql.database.name')]"
              ]
            },
            {
              "name": "Default",
              "type": "backupLongTermRetentionPolicies",
              "apiVersion": "2017-03-01-preview",
              "properties": {
                "weeklyRetention": "P1W",
                "monthlyRetention": "P4W",
                "yearlyRetention": "P12M",
                "weekOfYear": 1
              },
              "dependsOn": [
                "[parameters('sql.database.name')]"
              ]
            },
            {
              "name": "ForceLastGoodPlan",
              "type": "advisors",
              "apiVersion": "2014-04-01",
              "properties": {
                "autoExecuteValue": "Enabled"
              },
              "scale": null,
              "dependsOn": [
                "[parameters('sql.database.name')]"
              ]
            }
          ]
        },
        {
          "name": "AuditingSettings",
          "type": "auditingSettings",
          "apiVersion": "2015-05-01-preview",
          "properties": {
            "state": "Enabled",
            "storageEndpoint": "[variables('sql.server.primary.storage.account.endpoint')]",
            "storageAccountAccessKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('sql.server.primary.storage.account.name')), providers('Microsoft.Storage', 'storageAccounts').apiVersion[0]).keys[0].value]",
            "auditActionsAndGroups": "[variables('sql.server.storage.account.audit.event.types')]",
            "storageAccountSubscriptionId": "[parameters('sql.server.storage.account.subscription.id')]",
            "isStorageSecondaryKeyInUse": false,
            "retentionInDays": "[variables('sql.server.storage.account.audit.retention.in.days')]"
          },
          "dependsOn": [
            "[concat('Microsoft.Sql/servers', parameters('sql.server.primary.name'))]",
            "[concat('Microsoft.Sql/servers', parameters('sql.server.primary.name'), '/databases/', parameters('sql.database.name'))]"
          ]
        },
        {
          "name": "SecurityAlerts",
          "type": "securityAlertPolicies",
          "apiVersion": "2015-05-01-preview",
          "properties": {
            "state": "Enabled",
            "storageEndpoint": "[variables('sql.server.primary.storage.account.endpoint')]",
            "storageAccountName": "[parameters('sql.server.primary.storage.account.name')]",
            "storageAccountAccessKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('sql.server.primary.storage.account.name')), providers('Microsoft.Storage', 'storageAccounts').apiVersion[0]).keys[0].value]",
            "emailAddresses": "[parameters('sql.server.security.email.addresses')]",
            "retentionInDays": "[variables('sql.server.storage.account.audit.retention.in.days')]"
          },
          "dependsOn": [
            "[concat('Microsoft.Sql/servers', parameters('sql.server.primary.name'))]",
            "[concat('Microsoft.Sql/servers', parameters('sql.server.primary.name'), '/auditingSettings/AuditingSettings')]"
          ]
        }
      ]
    },
    {
      "type": "Microsoft.Sql/servers",
      "name": "[parameters('sql.server.secondary.name')]",
      "location": "[parameters('sql.server.secondary.location')]",
      "apiVersion": "2015–05–01-preview",
      "properties": {
        "administratorLogin": "[parameters('sql.server.administrator.user.name')]",
        "administratorLoginPassword": "[parameters('sql.server.administrator.password')]"
      },
      "resources": [
        {
          "type": "administrators",
          "name": "activeDirectory",
          "location": "[parameters('sql.server.secondary.location')]",
          "apiVersion": "2014-04-01-preview",
          "properties": {
            "administratorType": "ActiveDirectory",
            "login": "[parameters('azure.active.directory.administrator.group')]",
            "sid": "[parameters('azure.active.directory.object.id')]",
            "tenantId": "[parameters('azure.active.directory.tenant.id')]"
          },
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', parameters('sql.server.secondary.name'))]"
          ]
        },
        {
          "name": "AuditingSettings",
          "type": "auditingSettings",
          "apiVersion": "2015-05-01-preview",
          "properties": {
            "state": "Enabled",
            "storageEndpoint": "[variables('sql.server.secondary.storage.account.endpoint')]",
            "storageAccountAccessKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('sql.server.secondary.storage.account.name')), providers('Microsoft.Storage', 'storageAccounts').apiVersion[0]).keys[0].value]",
            "auditActionsAndGroups": "[variables('sql.server.storage.account.audit.event.types')]",
            "storageAccountSubscriptionId": "[parameters('sql.server.storage.account.subscription.id')]",
            "isStorageSecondaryKeyInUse": false,
            "retentionInDays": "[variables('sql.server.storage.account.audit.retention.in.days')]"
          },
          "dependsOn": [
            "[concat('Microsoft.Sql/servers', parameters('sql.server.secondary.name'))]",
            "[concat('Microsoft.Sql/servers', parameters('sql.server.secondary.name'), '/databases/', parameters('sql.database.name'))]"
          ]
        },
        {
          "name": "SecurityAlerts",
          "type": "securityAlertPolicies",
          "apiVersion": "2015-05-01-preview",
          "properties": {
            "state": "Enabled",
            "storageEndpoint": "[variables('sql.server.secondary.storage.account.endpoint')]",
            "storageAccountName": "[parameters('sql.server.secondary.storage.account.name')]",
            "storageAccountAccessKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('sql.server.secondary.storage.account.name')), providers('Microsoft.Storage', 'storageAccounts').apiVersion[0]).keys[0].value]",
            "emailAddresses": "[parameters('sql.server.security.email.addresses')]",
            "retentionInDays": "[variables('sql.server.storage.account.audit.retention.in.days')]"
          },
          "dependsOn": [
            "[concat('Microsoft.Sql/servers', parameters('sql.server.secondary.name'))]",
            "[concat('Microsoft.Sql/servers', parameters('sql.server.secondary.name'), '/auditingSettings/AuditingSettings')]"
          ]
        }
      ]
    },
    {
      "type": "Microsoft.Sql/servers/firewallRules",
      "name": "[concat(parameters('sql.server.primary.name'), '/', parameters('sql.server.whitelisted.ip.addresses').values[copyIndex()].name)]",
      "location": "[parameters('sql.server.primary.location')]",
      "apiVersion": "2015–05–01-preview",
      "copy": {
        "name": "copyLoop",
        "count": "[length(parameters('sql.server.whitelisted.ip.addresses').values)]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', parameters('sql.server.primary.name'))]"
      ],
      "properties": {
        "startIpAddress": "[parameters('sql.server.whitelisted.ip.addresses').values[copyIndex()].start]",
        "endIpAddress": "[parameters('sql.server.whitelisted.ip.addresses').values[copyIndex()].end]"
      }
    },
    {
      "type": "Microsoft.Sql/servers/firewallRules",
      "name": "[concat(parameters('sql.server.secondary.name'), '/', parameters('sql.server.whitelisted.ip.addresses').values[copyIndex()].name)]",
      "location": "[parameters('sql.server.secondary.location')]",
      "apiVersion": "2015–05–01-preview",
      "copy": {
        "name": "copyLoop",
        "count": "[length(parameters('sql.server.whitelisted.ip.addresses').values)]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', parameters('sql.server.secondary.name'))]"
      ],
      "properties": {
        "startIpAddress": "[parameters('sql.server.whitelisted.ip.addresses').values[copyIndex()].start]",
        "endIpAddress": "[parameters('sql.server.whitelisted.ip.addresses').values[copyIndex()].end]"
      }
    }
  ]
}
